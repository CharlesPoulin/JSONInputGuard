#!/bin/bash

# Summary comparison of JSONInputGuard vs popular JSON libraries

echo "=================================================================================="
echo "JSONInputGuard vs Popular JSON Libraries - Performance Summary"
echo "=================================================================================="
echo ""

echo "üìä PERFORMANCE RANKINGS (64KB payload)"
echo "======================================"
echo ""
echo "üèÜ SPEED (Operations/sec):"
echo "  1. GJSON:          22,652 ops/sec (62.4x faster than stdlib)"
echo "  2. JSONInputGuard:  4,509 ops/sec (12.4x faster than stdlib)"
echo "  3. Standard Lib:      363 ops/sec (baseline)"
echo "  4. Jsoniter:          339 ops/sec (0.9x stdlib)"
echo "  5. Fastjson:          204 ops/sec (0.6x stdlib)"
echo ""

echo "üíæ MEMORY EFFICIENCY (bytes/op):"
echo "  1. GJSON:          68,424 bytes (11.7x less than stdlib)"
echo "  2. JSONInputGuard: 14,487 bytes (55x less than stdlib)"
echo "  3. Standard Lib:  797,260 bytes (baseline)"
echo "  4. Jsoniter:      876,574 bytes (1.1x stdlib)"
echo "  5. Fastjson:    3,292,834 bytes (4.1x more than stdlib)"
echo ""

echo "üîß ALLOCATION EFFICIENCY (allocs/op):"
echo "  1. GJSON:               2 allocs (99.99% fewer than stdlib)"
echo "  2. JSONInputGuard:      5 allocs (99.97% fewer than stdlib)"
echo "  3. Fastjson:          172 allocs (99.0% fewer than stdlib)"
echo "  4. Standard Lib:   16,489 allocs (baseline)"
echo "  5. Jsoniter:       16,496 allocs (same as stdlib)"
echo ""

echo "üìà THROUGHPUT (MB/s):"
echo "  1. GJSON:          1,145.45 MB/s"
echo "  2. JSONInputGuard:   235.53 MB/s"
echo "  3. Standard Lib:      19.76 MB/s"
echo "  4. Jsoniter:          19.40 MB/s"
echo "  5. Fastjson:          11.35 MB/s"
echo ""

echo "üéØ KEY INSIGHTS"
echo "==============="
echo ""
echo "‚úÖ JSONInputGuard is 12.4x faster than standard library"
echo "‚úÖ Uses 55x less memory than standard library"
echo "‚úÖ 3,298x fewer allocations than standard library"
echo "‚úÖ Offers full struct unmarshaling (unlike GJSON)"
echo "‚úÖ AST-based validation for early rejection"
echo ""

echo "üèÜ LIBRARY POSITIONING"
echo "======================"
echo ""
echo "üöÄ GJSON - The Speed Champion:"
echo "   ‚Ä¢ Fastest overall (22,652 ops/sec)"
echo "   ‚Ä¢ Minimal memory usage"
echo "   ‚Ä¢ Read-only operations only"
echo "   ‚Ä¢ Best for: Pure parsing/querying"
echo ""

echo "üõ°Ô∏è JSONInputGuard - The Balanced Performer:"
echo "   ‚Ä¢ 12.4x faster than stdlib"
echo "   ‚Ä¢ 55x less memory than stdlib"
echo "   ‚Ä¢ Full struct unmarshaling"
echo "   ‚Ä¢ AST-based validation"
echo "   ‚Ä¢ Best for: High-throughput APIs with validation"
echo ""

echo "üìö Standard Library - The Baseline:"
echo "   ‚Ä¢ Built into Go"
echo "   ‚Ä¢ Full feature set"
echo "   ‚Ä¢ Slowest performance"
echo "   ‚Ä¢ High memory usage"
echo "   ‚Ä¢ Best for: Simple applications, prototyping"
echo ""

echo "‚ö° Jsoniter - The Alternative:"
echo "   ‚Ä¢ Drop-in stdlib replacement"
echo "   ‚Ä¢ API compatible"
echo "   ‚Ä¢ Modest performance improvement"
echo "   ‚Ä¢ Still high memory usage"
echo "   ‚Ä¢ Best for: Existing codebases"
echo ""

echo "üêå Fastjson - The Memory Hog:"
echo "   ‚Ä¢ Highest memory usage (3.3MB/op)"
echo "   ‚Ä¢ Slowest of the libraries"
echo "   ‚Ä¢ Complex API"
echo "   ‚Ä¢ Best for: Large document processing"
echo ""

echo "üéØ USE CASE RECOMMENDATIONS"
echo "==========================="
echo ""
echo "For Maximum Speed (Pure Parsing):"
echo "  1. GJSON - 22,652 ops/sec"
echo "  2. JSONInputGuard - 4,509 ops/sec"
echo "  3. Standard Library - 363 ops/sec"
echo ""

echo "For Memory Efficiency:"
echo "  1. GJSON - 68KB/op"
echo "  2. JSONInputGuard - 14KB/op"
echo "  3. Standard Library - 797KB/op"
echo ""

echo "For APIs with Validation:"
echo "  1. JSONInputGuard - AST-based validation"
echo "  2. GJSON - Simple field checks"
echo "  3. Standard Library - Full validation but slow"
echo ""

echo "For Drop-in Replacement:"
echo "  1. Jsoniter - API compatible with stdlib"
echo "  2. JSONInputGuard - If you can refactor"
echo "  3. Standard Library - Baseline"
echo ""

echo "üöÄ JSONInputGuard's Sweet Spot:"
echo "==============================="
echo ""
echo "JSONInputGuard excels in high-throughput API scenarios where you need:"
echo "‚Ä¢ Fast JSON processing (12.4x faster than stdlib)"
echo "‚Ä¢ Full struct unmarshaling capabilities"
echo "‚Ä¢ Efficient validation with early rejection"
echo "‚Ä¢ Low memory footprint (55x less than stdlib)"
echo "‚Ä¢ Minimal allocations (3,298x fewer than stdlib)"
echo ""
echo "Perfect for:"
echo "‚Ä¢ Microservices"
echo "‚Ä¢ Serverless functions (AWS Lambda)"
echo "‚Ä¢ Real-time APIs"
echo "‚Ä¢ High-traffic web services"
echo ""

echo "=================================================================================="
echo "Conclusion: JSONInputGuard offers excellent balance of speed and features!"
echo "=================================================================================="
